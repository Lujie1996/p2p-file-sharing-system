syntax = "proto3";

package chordService;

service Chord {
	rpc find_successor(FindSuccessorRequest) returns (FindSuccessorResponse) {}
	rpc get_predecessor(GetPredecessorRequest) returns (GetPredecessorResponse) {}
	rpc get_configuration (GetConfigurationRequest) returns (GetConfigurationResponse) {}

	rpc notify_at_join(NotifyRequest) returns (NotifyResponse) {}
	rpc notify_at_leave(NotifyRequest) returns (NotifyResponse) {}

	rpc get (GetRequest) returns (GetResponse) {}
	rpc put (PutRequest) returns (PutResponse) {}
    rpc check(CheckRequest) returns (CheckResponse) {}

}

message FindSuccessorRequest {
	int32 id = 1;
	int32 pathlen = 2;
}

message FindSuccessorResponse {
	int32 successorId = 1;
	int32 pathlen = 2;
	string addr = 3;
}

message GetPredecessorRequest {

}

message GetPredecessorResponse {
	int32 id = 1;
	string addr = 2;
}

message NotifyRequest {
    int32 predecessorId = 1;
    string addr = 2;
}

message Pair {
    string key = 1;
    int32 len = 2;
    int32 seq_num = 3;
    repeated string addrs = 4;
}

message NotifyResponse {
    int32 result = 1;
    repeated Pair pairs = 2;
}

message CheckRequest {
    repeated Pair pairs = 1;
}

message CheckResponse {
    int32 result = 1;
}

message GetConfigurationRequest {

}

message GetConfigurationResponse {
    int32 predecessorId = 1;
    int32 successorId = 2;
	message Entry {
		int32 id = 1;
		int32 successor_id = 2;
		string addr = 3;
	}
	repeated Entry table = 3;
}

message GetRequest {
   repeated string keys = 1;
}

message GetResponse {
    int32 result = 1;
    repeated Pair pairs = 2;
}

message PutRequest {
    repeated Pair pairs = 1;
}

message PutResponse {
   int32 result = 1;
}

message CheckRequest {
   repeated Pair pairs = 1;
}

message CheckResponse {
   int32 result = 1;
}
