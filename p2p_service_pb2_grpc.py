# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import p2p_service_pb2 as p2p__service__pb2


class P2PStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.rpc_register_file = channel.unary_unary(
        '/p2pService.P2P/rpc_register_file',
        request_serializer=p2p__service__pb2.RegisterFileRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.RegisterFileResponse.FromString,
        )
    self.rpc_look_up_file = channel.unary_unary(
        '/p2pService.P2P/rpc_look_up_file',
        request_serializer=p2p__service__pb2.LookUpFileRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.LookUpFileResponse.FromString,
        )
    self.rpc_download = channel.unary_unary(
        '/p2pService.P2P/rpc_download',
        request_serializer=p2p__service__pb2.DownloadRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.DownloadResponse.FromString,
        )
    self.rpc_add_chord_node = channel.unary_unary(
        '/p2pService.P2P/rpc_add_chord_node',
        request_serializer=p2p__service__pb2.AddChordNodeRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.AddChordNodeResponse.FromString,
        )
    self.rpc_remove_chord_node = channel.unary_unary(
        '/p2pService.P2P/rpc_remove_chord_node',
        request_serializer=p2p__service__pb2.RemoveChordNodeRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.RemoveChordNodeResponse.FromString,
        )
    self.rpc_get_debug = channel.unary_unary(
        '/p2pService.P2P/rpc_get_debug',
        request_serializer=p2p__service__pb2.GetDeubgRequest.SerializeToString,
        response_deserializer=p2p__service__pb2.GetDeubgResponse.FromString,
        )


class P2PServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def rpc_register_file(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rpc_look_up_file(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rpc_download(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rpc_add_chord_node(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rpc_remove_chord_node(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rpc_get_debug(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_P2PServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'rpc_register_file': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_register_file,
          request_deserializer=p2p__service__pb2.RegisterFileRequest.FromString,
          response_serializer=p2p__service__pb2.RegisterFileResponse.SerializeToString,
      ),
      'rpc_look_up_file': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_look_up_file,
          request_deserializer=p2p__service__pb2.LookUpFileRequest.FromString,
          response_serializer=p2p__service__pb2.LookUpFileResponse.SerializeToString,
      ),
      'rpc_download': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_download,
          request_deserializer=p2p__service__pb2.DownloadRequest.FromString,
          response_serializer=p2p__service__pb2.DownloadResponse.SerializeToString,
      ),
      'rpc_add_chord_node': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_add_chord_node,
          request_deserializer=p2p__service__pb2.AddChordNodeRequest.FromString,
          response_serializer=p2p__service__pb2.AddChordNodeResponse.SerializeToString,
      ),
      'rpc_remove_chord_node': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_remove_chord_node,
          request_deserializer=p2p__service__pb2.RemoveChordNodeRequest.FromString,
          response_serializer=p2p__service__pb2.RemoveChordNodeResponse.SerializeToString,
      ),
      'rpc_get_debug': grpc.unary_unary_rpc_method_handler(
          servicer.rpc_get_debug,
          request_deserializer=p2p__service__pb2.GetDeubgRequest.FromString,
          response_serializer=p2p__service__pb2.GetDeubgResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'p2pService.P2P', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
